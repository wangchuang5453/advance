/**
 * TCP三次握手 
 * 参考文章：
 * https://www.eet-china.com/mp/a44399.html
 * https://blog.csdn.net/webnumen/article/details/1541330
 * https://juejin.cn/post/6983639186146328607#heading-1
 * https://segmentfault.com/a/1190000039165592 ！！最好
 */


/**
 * 企业微信打电话信号不好
 * 1：喂，听得到吗
 * 2：听到了，你听到吗？
 * 1：听到了听到了
 * 121212blabla...
 * 
 * （可以先简单概述 TCP 过程，然后三次握手具体描述时，需要说明状态的基本转换）
 */


/**
 * 本质：
 * 通过 彼此都发出了自己的消息，又都收到了对方的消息
 * 判断 双方的接收和发送能力是否正常
 * 
 * 三次握手的作用？
 * 进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常，
 * 指定自己的 初始化序列号(Init Sequense Number, ISN) 为后面的可靠性传输做准备。
 */



/**
 * （三次握手过程可见tcp3.png）
 * 第一次握手：（第一次握手(SYN=1, seq=x)，发送完毕后，客户端进入 SYN_SEND 状态）
 * 客户端向服务端发送一个 SYN 报文（SYN = 1），并指明客户端的初始化序列号 ISN(x)，
 * 即图中的 seq = x，表示本报文段所发送的数据的第一个字节的序号。此时客户端处于 SYN_SEND 状态。
 * 
 * 第二次握手：（第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1)， 发送完毕后，服务器端进入 SYN_RCVD 状态）
 * 服务器收到客户端的 SYN 报文之后，会发送 SYN 报文作为应答（SYN = 1，ACK = 1），并且指定自己的初始化序列号 ISN(y)，即图中的 seq = y。
 * 同时会把客户端的 ISN + 1 作为确认号 ack 的值，表示已经收到了客户端发来的的 SYN 报文，希望收到的下一个数据的第一个字节的序号是 x + 1，
 * 此时服务器处于 SYN_REVD 的状态。
 * 
 * 第三次握手：（第三次握手(ACK=1，ACKnum=y+1)，发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时,也进入 ESTABLISHED 状态，TCP 握手，即可以开始数据传输）
 * 客户端收到服务器端响应的 SYN 报文之后，会发送一个 ACK 报文，也是一样把服务器的 ISN + 1 作为 ack 的值，
 * 表示已经收到了服务端发来的的 SYN 报文，希望收到的下一个数据的第一个字节的序号是 y + 1，并指明此时客户端的序列号 seq = x + 1（初始为 seq = x，所以第二个报文段要 +1），
 * 此时客户端处于 Establised 状态。
 * 
 */


/** 
 * 问题：为什么 TCP 采用三次握手，二次握手可以吗？
 * 
 * 那么假设二次握手后就建立连接，看看会出现什么问题
 * 服务端无法判断客户端接收消息的能力是否正常，这就会出现两种情况：
 * 1、客户端收到了消息，只是没有再次通知服务端，可以通信，但是不够可靠不能满足复杂场景的应用。
 * 比如无法阻止重复历史连接的初始化，客户端如果因为某种原因，发送了两个SYN包，如果是三次握手，
 * 第二次握手返回SYN+ACK包时发现是旧的报文，那么向服务器发送RST报文，知道正确的报文到达服务器才建立连接。
 *
 * ？？？我们知道 TCP 新建连接时，内核会为连接分配一系列的内存资源，如果采用两次握手，就建立连接，那会放大 DDOS 攻击的。
 * 
 * 2、客户端没有收到消息
 * ①客户端不具备接收消息的能力
 * 如果建立了连接，这个连接是无法正常使用的，浪费资源
 * ②客户端具备接收能力，但是没有接收到，那就拿不到服务器发送的初始序列号，
 * 建立连接之后，连接传递信息的可靠性无法保证
 * => 引申
 * 初始序列号（ISN initial sequence number）是什么，如何使用的？作用是什么？
 * 序列号：
 * TCP通过数据分段中的序列号来保证所有传输的数据可以按照正常的顺序进行重组，从而保障数据传输的完整。
 * 
 * 是什么：
 * tcp在建立连接时发送的报文中的一段随机数值，由发送双方协商得到。
 * RFC1948中提出了一个较好的初始化序列号ISN随机生成算法。ISN = M + F(localhost, localport, remotehost, remoteport).
 * M是一个计时器，这个计时器每隔4毫秒加1。
 * F是一个Hash算法，根据源IP、目的IP、源端口、目的端口生成一个随机数值。要保证hash算法不能被外部轻易推算得出，用MD5算法是一个比较好的选择。
 * 如何使用的：
 * 第一次握手客户端产生一个初始序列号，第二次握手服务端生成一个初始序列号，TCP连接是全双工的工作模式
 * 作用：
 * 第一次握手的SYN包和第二次握手的SYN+ACK包中都有这个数值，用于tcp报文段的识别（区分）和排序。
 * 每一个连接都拥有不同的初始序列号。
 * TCP报文段在经过网络路由后可能会存在延迟抵达与排序混乱的情况。
 * 
 * 
 */



/** 
 * TCP 作为一种可靠传输控制协议，
 * 其核心思想：既要保证数据可靠传输，又要提高传输的效率，而三次握手恰好可以满足以上两方面的需求
 * 
 * 
 */


/**
 * tcp 四次挥手   终止一个连接需要经过四次挥手
 * 
 * 
 * 
 */